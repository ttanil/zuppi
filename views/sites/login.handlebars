<!DOCTYPE html>
<html lang="tr">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0" />
  <title>zuppi - Giriş Yap</title>
  <link rel="icon" type="image/png" href="img/favicon.png" sizes="32x32">
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="css/index.css">
  <style>
    body {background-color: #09090b;}
  </style>
</head>
<body class="min-h-screen flex items-center justify-center bg-black">
  <!-- GİRİŞ/KAYIT KARTI -->
  <div class="w-full max-w-md mx-auto px-4 py-10 flex flex-col items-center justify-center">
    <div class="bg-zinc-900/90 rounded-2xl shadow-2xl px-8 py-10 w-full flex flex-col gap-6">
      <!-- LOGO ve Başlık -->
      <a href="/" class="flex flex-col items-center mb-2 select-none focus:outline-none group">
        <!-- LOGO kısmı: Pulse ve Zuppi yan yana -->
        <span class="flex items-center justify-center w-full gap-0">
          <!-- Pulse animasyonlu kırmızı daire -->
          <span class="inline-block w-7 h-7 bg-red-600 rounded-full animate-pulse mt-3"></span>
          
            <!-- Responsive Logo -->
            <img src="/img/1kopya.png" alt="Zuppi Logo"
              class="h-10 sm:h-14 w-auto select-none mt-3 ml-1 sm:ml-0" style="margin-bottom:2px">

            <!-- "uppi" metni -->
            <span class="font-extrabold text-white text-2xl sm:text-4xl select-none -ml-4 sm:-ml-6 mt-1 sm:mt-0"
              style="font-family:'Helvetica Neue',sans-serif; letter-spacing:0.08em;">
              uppi
            </span>
        </span>
        <!-- SLOGAN alt satırda -->
        <span class="text-xs text-gray-400 tracking-widest mt-2 group-hover:text-yellow-400 transition mt-4">
          EN İYİLERİN PLATFORMU
        </span>
      </a>
      <h2 class="text-white font-black text-2xl text-center mt-2 mb-4">Giriş Yap</h2>
      <p class="text-gray-400 text-center text-sm mb-3">
        Hesabınız yok mu?
        <a href="/register" class="text-red-400 hover:text-yellow-400 font-bold underline transition">Kayıt Olun</a>
      </p>
      <!-- Form -->
      <form action="/login" method="post" class="flex flex-col gap-4">
        <div>
          <label for="email" class="text-sm text-gray-200 font-semibold mb-1 block">E-posta</label>
          <input type="email" id="email" name="email" required
            class="w-full bg-zinc-800 border border-zinc-700 focus:border-red-600 rounded-lg py-2 px-3 text-gray-100 placeholder-gray-400 focus:outline-none transition"
            placeholder="e-posta adresiniz" autocomplete="username">
        </div>
        <div class="relative">
          <label for="password" class="text-sm text-gray-200 font-semibold mb-1 block">Şifre</label>
          <input type="password" id="password" name="password" required
                class="w-full bg-zinc-800 border border-zinc-700 focus:border-red-600 rounded-lg py-2 px-3 text-gray-100 placeholder-gray-400 focus:outline-none transition pr-10"
                placeholder="şifreniz" autocomplete="current-password">
          <!-- Göz butonu -->
          <button type="button" id="togglePassword"
                  class="absolute right-3 top-9 transform -translate-y-1/2 text-gray-400 hover:text-yellow-400 transition focus:outline-none hidden">
            <!-- Göz Açık (başta görünür)-->
            <svg id="eyeOpen" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 block" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.478 0-8.268-2.943-9.542-7z" />
            </svg>
            <!-- Göz Kapalı (başta gizli)-->
            <svg id="eyeClosed" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.542-7a9.97 9.97 0 012.948-4.568M6.7 6.7A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.542 7a9.969 9.969 0 01-4.043 5.306M3 3l18 18M9.88 9.88a3 3 0 104.24 4.24"/>
            </svg>
          </button>
        </div>
        <!-- Örnek Hata Mesajı (isteğe bağlı, JS ile ekle): -->
        <!-- <div class="text-red-400 text-xs text-center">E-posta veya şifre hatalı!</div> -->
        <button type="submit"
          class="w-full bg-red-600 hover:bg-red-700 text-white font-bold rounded-xl py-3 mt-2 transition focus:outline-none focus:ring-2 focus:ring-yellow-400">
          Giriş Yap
        </button>
      </form>
      <!-- veya bölümü 
      <div class="flex items-center gap-4 my-2">
        <span class="border-b border-zinc-700 flex-1"></span>
        <span class="text-gray-500 text-xs font-bold">veya</span>
        <span class="border-b border-zinc-700 flex-1"></span>
      </div>
      <button class="flex gap-2 items-center bg-white text-black rounded-xl py-3 px-2 font-bold shadow hover:bg-gray-100 transition">
        <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google" class="h-5 w-5">
        Google ile Giriş Yap
    </button> -->
      <!-- Şifre hatırlatma -->
      <div class="flex flex-row justify-center mt-3">
        <a href="/forgot-password" class="text-xs text-gray-400 hover:text-yellow-400 transition underline">Şifremi unuttum</a>
      </div>
      <div id="feedback" style="color:#fff;" class="text-xs text-center mt-2"></div>
    </div>
  </div>

  <!-- Cihaz İsmi Modalı -->
<div id="deviceNameModal" class="fixed inset-0 z-50 bg-black bg-opacity-60 flex items-center justify-center hidden">
  <div class="bg-zinc-900 text-white rounded-2xl shadow-2xl p-8 w-full max-w-sm flex flex-col items-center gap-4 relative">
    <button id="closeDeviceNameModal" class="absolute top-2 right-3 text-zinc-400 hover:text-red-400 text-lg focus:outline-none">&times;</button>
    <div class="font-bold text-lg mb-2 flex flex-col items-center">
      <span class="text-2xl">Cihaz İsmi</span>
      <span class="text-xs text-gray-400 mt-2">Giriş yaptığınız bu cihaza bir isim verin</span>
    </div>
    <input
      id="deviceNameInput"
      type="text"
      maxlength="32"
      class="bg-zinc-800 border border-zinc-600 rounded-lg py-2 px-3 w-full mt-2 mb-2 text-gray-100 placeholder-gray-400 focus:outline-none focus:border-red-500"
      placeholder="Örn: Fatma'nın iPhone'u, Ev PC"
      autocomplete="off"
      required
    />
    <div id="deviceNameError" class="text-red-400 text-xs mb-1"></div>
    <button id="saveDeviceNameBtn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold rounded-xl py-2 mt-2 transition focus:outline-none">
      Kaydet ve Devam Et
    </button>
  </div>
</div>

<!-- Cihaz Tanımsız Modalı -->
<div id="newDeviceApprovalModal" class="fixed inset-0 z-50 bg-black bg-opacity-70 flex items-center justify-center hidden">
  <div class="bg-zinc-900 text-white rounded-2xl shadow-2xl p-6 w-full max-w-sm flex flex-col items-center gap-6">
    <span class="font-bold text-xl">Yeni cihaz algılandı!</span>
    <p class="text-center text-gray-300">
      Bu cihaz şu anda hesabınızda kayıtlı değil.<br/>
      <span class="text-yellow-400 font-bold">Devam etmek için e-posta onayı gerekmektedir.</span><br>
      Onay işlemini başlatmak ister misiniz?
    </p>
    <div class="flex gap-4 w-full">
      <button id="approveNewDeviceBtn"
        class="flex-1 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-lg py-2 transition focus:outline-none">
        Evet, Devam Et
      </button>
      <button id="denyNewDeviceBtn"
        class="flex-1 bg-zinc-700 hover:bg-zinc-600 text-gray-200 border border-zinc-500 rounded-lg py-2 transition focus:outline-none">
        Hayır
      </button>
    </div>
    <div id="deviceApprovalFeedback" class="text-xs text-yellow-400 text-center"></div>
  </div>
</div>

<!-- Bilgi Modalı -->
<div id="infoModal" class="fixed inset-0 z-50 bg-black bg-opacity-70 flex items-center justify-center hidden">
  <div class="bg-zinc-900 text-white rounded-2xl shadow-2xl p-6 w-full max-w-sm flex flex-col items-center gap-6">
    <span class="font-bold text-lg" id="infoModalTitle">Bilgi</span>
    <div class="text-center text-gray-200" id="infoModalText"></div>
    <button id="closeInfoModalBtn" class="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-xl font-bold mt-2 transition focus:outline-none">
      Kapat
    </button>
  </div>
</div>


  <script src="https://openfpcdn.io/fingerprintjs/v4.1.1/fp.umd.min.js"></script>
  <script>
    const feedback = document.getElementById('feedback');

    let device_info, fingerprint;
    let email = null;

    // Şifre göz/gizle özelliği
    document.getElementById('togglePassword').addEventListener('click', function () {
      const passInput = document.getElementById('password');
      const eyeOpen = document.getElementById('eyeOpen');
      const eyeClosed = document.getElementById('eyeClosed');
      if (passInput.type === "password") {
        passInput.type = "text";
        eyeOpen.classList.add("hidden");
        eyeClosed.classList.remove("hidden");
      } else {
        passInput.type = "password";
        eyeOpen.classList.remove("hidden");
        eyeClosed.classList.add("hidden");
      }
    });

    async function getDeviceInfo() {
      return new Promise((resolve) => {
        const info = {
          os: navigator.platform || null,
          browser: (() => {
            const ua = navigator.userAgent;
            if (/Chrome/.test(ua)) return 'Chrome';
            if (/Firefox/.test(ua)) return 'Firefox';
            if (/Safari/.test(ua) && !/Chrome/.test(ua)) return 'Safari';
            if (/Edg/.test(ua)) return 'Edge';
            return 'Unknown';
          })(),
          browser_version: navigator.appVersion || null,
          device_type: /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
          model: null,
          user_agent: navigator.userAgent,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language,
          screen_resolution: window.screen.width + 'x' + window.screen.height,
          color_depth: window.screen.colorDepth,
          touch_support: 'ontouchstart' in window || navigator.maxTouchPoints > 0,
          is_incognito: null,
          geo_location: null // Şimdilik null, birazdan ekleyeceğiz.
        };
        resolve(info);
      });
    }
    // Güvenli Fingerprint + cihaz bilgisi döner
    async function getFingerprintAndDeviceInfo() {
      const device_info = await getDeviceInfo();
      let fingerprint = null;

      if (window.FingerprintJS) {
        try {
          await new Promise((resolve, reject) => {
            const fp = window.FingerprintJS();
            fp.get(result => {
              fingerprint = result.visitorId;
              resolve();
            }, reject);
          });
        } catch(err) {
          fingerprint = null;
        }
      }
      return { device_info, fingerprint };
    }
    
    function openDeviceNameModal() {
      document.getElementById('deviceNameModal').classList.remove('hidden');
    }
    function closeDeviceNameModal() {
      document.getElementById('deviceNameModal').classList.add('hidden');
    }
    document.getElementById('closeDeviceNameModal').onclick = closeDeviceNameModal;

    // Kaydet butonunu en başta ata:
    document.getElementById('saveDeviceNameBtn').onclick = async function() {
      const input = document.getElementById('deviceNameInput');
      const errorDiv = document.getElementById('deviceNameError');
      const val = input.value.trim();

      // Basit validasyon
      if (!val) {
        errorDiv.innerText = 'Lütfen bir cihaz ismi giriniz.';
        input.focus();
        return;
      }
      if (val.length > 32) {
        errorDiv.innerText = 'Cihaz ismi en fazla 32 karakter olabilir.';
        input.focus();
        return;
      }
      errorDiv.innerText = '';
      closeDeviceNameModal();

      device_info.deviceName = val;

      const payload = {
        status:"device-name",
        email,
        device_info,
        fingerprint
      };

      try {
        const res = await fetch('/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const responseData = await res.json();

        if (res.ok) {
          // Başarılı
          if (responseData.user?.deviceName) {
            device_info.deviceName = responseData.user.deviceName;
          }
          
          sendLoginNotificationEmail(email, device_info, responseData.user).catch(console.warn);
          window.location.href = '/user';
          
        } else {
          // hata mesajı göster
          const data = await res.json();
          feedback.textContent = data.error || 'Giriş hatası!';
          feedback.className = 'error';
          return;
        }

      } catch (error) {
        console.error('❌ Network error:', error);
        feedback.textContent = 'Bağlantı hatası!';
        feedback.className = 'error';
      }
    
    };

    // Bilgi modal aç/kapat fonksiyonları
    function openInfoModal(title, text) {
      document.getElementById('infoModalTitle').textContent = title || "Bilgi";
      document.getElementById('infoModalText').textContent = text || "";
      document.getElementById('infoModal').classList.remove('hidden');

      document.getElementById('email').value = '';
      document.getElementById('password').value = '';
    }
    function closeInfoModal() {
      document.getElementById('infoModal').classList.add('hidden');
    }
    document.getElementById('closeInfoModalBtn').onclick = function() {
      closeInfoModal();
    };

    // --------- Tanımsız Cihaz Modalı Fonksiyonları ---------
    function openNewDeviceApprovalModal() {
      document.getElementById('newDeviceApprovalModal').classList.remove('hidden');
      document.getElementById('deviceApprovalFeedback').textContent = '';
    }
    function closeNewDeviceApprovalModal() {
      document.getElementById('newDeviceApprovalModal').classList.add('hidden');
    }
    document.getElementById('denyNewDeviceBtn').onclick = function() {
      closeNewDeviceApprovalModal();
      feedback.textContent = 'Yeni cihazla giriş isteği iptal edildi.';
      feedback.className = 'text-yellow-400 text-xs text-center';

      document.getElementById('email').value = '';
      document.getElementById('password').value = '';
    };

    document.getElementById('approveNewDeviceBtn').onclick = async function() {
      // Onay maili sürecini başlat
      closeNewDeviceApprovalModal();

      openInfoModal("Bekleyin", "Onay e-postası gönderiliyor, lütfen kontrol ediniz...");

      const { device_info: geoDeviceInfo, fingerprint: freshFingerprint } = await getFingerprintAndDeviceInfoWithGeo();

      //console.log("email",email);
      //sendLoginVerificationEmail(email, device_info, email).catch(console.warn);
      await sendLoginVerificationEmail(email, device_info);

/*
      const payload = {
        status: "device-approval-request",
        email,
        device_info: geoDeviceInfo,
        fingerprint: freshFingerprint
      };

      const res = await fetch('/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (res.ok) {
        document.getElementById('infoModalTitle').textContent = "E-posta Gönderildi";
        document.getElementById('infoModalText').textContent =
          "E-posta adresinize onay bağlantısı gönderildi. Lütfen e-postanızı kontrol edin.";

        const verification = await sendLoginVerificationEmail(email, device_info, responseData.user);

      } else {
        const data = await res.json();
        document.getElementById('infoModalTitle').textContent = "Hata";
        document.getElementById('infoModalText').textContent =
        data.error || 'Bir hata oluştu, lütfen tekrar deneyin.';
      }
      */
    };

    document.querySelector('form').addEventListener('submit', async function(e){
      e.preventDefault();
      feedback.textContent = '';

      email = document.getElementById('email').value.trim();
      const password = document.getElementById('password').value;

      ({ device_info, fingerprint } = await getFingerprintAndDeviceInfo());

      const payload = {
        status:"device",
        email,
        password,
        device_info,
        fingerprint
      };

      try {
        const res = await fetch('/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const responseData = await res.json();

        if (res.ok) {
          // Başarılı
          if (responseData.user?.deviceName) {
            device_info.deviceName = responseData.user.deviceName;
          }
          
          sendLoginNotificationEmail(email, device_info, responseData.user).catch(console.warn);
          
        } else {
          // Başarısız
          feedback.textContent = responseData.error || 'Giriş hatası!';
          feedback.className = 'error';
          
          if (responseData.error === "Yeni cihazla giriş yapılıyor!") {
            openDeviceNameModal();
          } else if (responseData.error === "Tanımlı olmayan cihazla giriş yapılıyor!") {
            openNewDeviceApprovalModal();
          }
        }

      } catch (error) {
        console.error('❌ Network error:', error);
        feedback.textContent = 'Bağlantı hatası!';
        feedback.className = 'error';
      }
    });

    async function getFingerprintAndDeviceInfoWithGeo() {
      const device_info = await getDeviceInfoWithGeo();
      let fingerprint = null;
      if (window.FingerprintJS) {
        try {
          await new Promise((resolve, reject) => {
            const fp = window.FingerprintJS();
            fp.get(result => {
              fingerprint = result.visitorId;
              resolve();
            }, reject);
          });
        } catch(err) {
          fingerprint = null;
        }
      }
      return { device_info, fingerprint };
    }

    async function getDeviceInfoWithGeo() {
      return new Promise((resolve) => {
        const info = {
          os: navigator.platform || null,
          browser: (() => {
            const ua = navigator.userAgent;
            if (/Chrome/.test(ua)) return 'Chrome';
            if (/Firefox/.test(ua)) return 'Firefox';
            if (/Safari/.test(ua) && !/Chrome/.test(ua)) return 'Safari';
            if (/Edg/.test(ua)) return 'Edge';
            return 'Unknown';
          })(),
          browser_version: navigator.appVersion || null,
          device_type: /Android|iPhone|iPad|iPod/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
          model: null,
          user_agent: navigator.userAgent,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          language: navigator.language,
          screen_resolution: window.screen.width + 'x' + window.screen.height,
          color_depth: window.screen.colorDepth,
          touch_support: 'ontouchstart' in window || navigator.maxTouchPoints > 0,
          is_incognito: null,
          geo_location: null
        };
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            pos => {
              info.geo_location = {
                latitude: pos.coords.latitude,
                longitude: pos.coords.longitude,
                accuracy: pos.coords.accuracy
              };
              resolve(info);
            },
            () => resolve(info), // Kullanıcı izin vermezse veya hata alırsa null
            { timeout: 6000 }
          );
        } else {
          resolve(info);
        }
      });
    }

    async function sendLoginNotificationEmail(userEmail, deviceInfo, userInfo) {
      try {
        
        const payload = {
          type: 'login_notification', // Backend'de hangi mail türü olduğunu belirtiyor
          userEmail,
          deviceInfo,
          userInfo
        };

        const response = await fetch('/api/mail/login-notification', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload)
        });

        if (response.ok) {
          const result = await response.json();
          return result;
        } else {
          const error = await response.json();
          throw new Error(error.error || 'Mail gönderilemedi');
        }
      } catch (error) {
        console.error('❌ Login mail error:', error);
        throw error;
      }
    }

    //----------------------- tanımsız cihaz onay maili--------------
    class EmailVerificationSystem {
      constructor() {
        this.verificationCheckInterval = null;
        this.messageListenerAdded = false;
        this.timeoutHandler = null;
        this.retryCount = 0;
        this.maxRetries = 3;
        
        this.init();
      }

      init() {
        this.addStyles();
        this.setupEventListeners();
      }

      // Modern CSS Stilleri
      addStyles() {
        if (document.querySelector('#verification-styles')) return;
        
        const styleElement = document.createElement('style');
        styleElement.id = 'verification-styles';
        styleElement.innerHTML = `
          /* Modern Verification Container */
          .verification-container {
            max-width: 500px;
            margin: 0 auto;
            padding: 40px 30px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            color: white;
            text-align: center;
            position: relative;
            overflow: hidden;
          }

          .verification-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg width="60" height="60" viewBox="0 0 60 60" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g fill="%23ffffff" fill-opacity="0.05"><circle cx="30" cy="30" r="4"/></g></svg>') repeat;
            pointer-events: none;
          }

          .verification-content {
            position: relative;
            z-index: 2;
          }

          /* Loading Spinner */
          .modern-spinner {
            width: 60px;
            height: 60px;
            border: 3px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin: 20px auto;
          }

          @keyframes spin {
            to { transform: rotate(360deg); }
          }

          /* Email Animation */
          .email-icon {
            font-size: 64px;
            animation: bounce 2s infinite;
            margin-bottom: 20px;
            display: block;
          }

          @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
          }

          /* Modern Buttons */
          .modern-btn {
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin: 8px;
            text-decoration: none;
            display: inline-block;
            position: relative;
            overflow: hidden;
          }

          .modern-btn:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
          }

          .modern-btn:active {
            transform: translateY(0);
          }

          .modern-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            transition: left 0.5s;
          }

          .modern-btn:hover::before {
            left: 100%;
          }

          /* Button Variants */
          .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
          }

          .btn-success {
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            border: none;
          }

          .btn-danger {
            background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);
            border: none;
          }

          .btn-warning {
            background: linear-gradient(135deg, #fdbb2d 0%, #22c1c3 100%);
            border: none;
          }

          /* Progress Bar */
          .progress-container {
            width: 100%;
            height: 6px;
            background: rgba(255,255,255,0.2);
            border-radius: 3px;
            margin: 20px 0;
            overflow: hidden;
          }

          .progress-bar {
            height: 100%;
            background: linear-gradient(90deg, #00d2ff 0%, #3a7bd5 100%);
            border-radius: 3px;
            animation: progress 120s linear forwards;
          }

          @keyframes progress {
            from { width: 100%; }
            to { width: 0%; }
          }

          /* Info Cards */
          .info-card {
            background: rgba(255,255,255,0.15);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #ffd700;
          }

          /* Email Providers */
          .email-providers {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin: 25px 0;
          }

          .email-provider {
            background: rgba(255,255,255,0.1);
            padding: 15px 10px;
            border-radius: 15px;
            text-decoration: none;
            color: white;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.2);
          }

          .email-provider:hover {
            background: rgba(255,255,255,0.2);
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.2);
          }

          /* Notifications */
          .notification {
            position: fixed;
            top: 30px;
            right: 30px;
            max-width: 400px;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            z-index: 10000;
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255,255,255,0.2);
            animation: slideInRight 0.5s ease-out;
          }

          .notification-success {
            background: linear-gradient(135deg, rgba(17,153,142,0.9) 0%, rgba(56,239,125,0.9) 100%);
            color: white;
          }

          .notification-error {
            background: linear-gradient(135deg, rgba(252,70,107,0.9) 0%, rgba(63,94,251,0.9) 100%);
            color: white;
          }

          @keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
          }

          @keyframes slideOutRight {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(100%); opacity: 0; }
          }

          /* Responsive Design */
          @media (max-width: 768px) {
            .verification-container {
              margin: 20px;
              padding: 30px 20px;
              border-radius: 15px;
            }

            .modern-btn {
              display: block;
              width: 90%;
              margin: 10px auto;
            }

            .notification {
              top: 20px;
              right: 20px;
              left: 20px;
              max-width: none;
            }

            .email-providers {
              grid-template-columns: 1fr;
            }
          }

          /* Fade In Animation */
          .fade-in {
            animation: fadeIn 0.8s ease-out;
          }

          @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
          }

          /* Pulse Animation */
          .pulse {
            animation: pulse 2s infinite;
          }

          @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(255,255,255,0.7); }
            70% { box-shadow: 0 0 0 10px rgba(255,255,255,0); }
            100% { box-shadow: 0 0 0 0 rgba(255,255,255,0); }
          }
        `;
        document.head.appendChild(styleElement);
      }

      // Event Listener'ları Kur
      setupEventListeners() {
        // PostMessage listener
        window.removeEventListener('message', this.handleVerificationMessage.bind(this));
        window.addEventListener('message', this.handleVerificationMessage.bind(this), false);
        
        // LocalStorage listener
        window.removeEventListener('storage', this.handleStorageChange.bind(this));
        window.addEventListener('storage', this.handleStorageChange.bind(this), false);
        
      }

      // PostMessage Handler
      handleVerificationMessage(event) {
        const allowedOrigins = [
          window.location.origin, 
          'http://127.0.0.1:5000',
          'http://localhost:5000',
          'https://zuppi.live'
        ];
        
        if (!allowedOrigins.includes(event.origin)) {
          return;
        }

        if (event.data && event.data.type === 'LOGIN_VERIFIED') {
          
          this.stopVerificationCheck();
          
          if (event.data.action === 'approved') {
            this.handleSuccessfulLogin(event.data.userData);
          } else if (event.data.action === 'denied') {
            this.handleDeniedLogin(event.data.userData);
          }
        }
      }

      // LocalStorage Change Handler
      handleStorageChange(event) {
        if (event.key === 'loginVerification' && event.newValue) {
          try {
            const data = JSON.parse(event.newValue);
            
            if (data.verified && (Date.now() - data.timestamp) < 30000) {
              this.stopVerificationCheck();
              
              if (data.action === 'approved') {
                this.handleSuccessfulLogin(data.userData);
              } else if (data.action === 'denied') {
                this.handleDeniedLogin(data.userData);
              }
            }
          } catch (e) {
            console.error('❌ LocalStorage parse error:', e);
          }
        }
      }

      // Ana Fonksiyon: E-posta Doğrulama Gönder
      async sendLoginVerificationEmail(userEmail, deviceInfo, userInfo = null) {
        try {
          
          // E-posta adresini kaydet
          localStorage.setItem('lastVerificationEmail', userEmail);
          
          const payload = {
            userEmail,
            deviceInfo,
            userInfo: userInfo || { name: userEmail.split('@')[0] }
          };

          const response = await fetch('/api/mail/login-verification', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
          });

          if (response.ok) {
            const result = await response.json();
            
            // Modern UI göster
            this.showVerificationWaiting(userEmail);
            
            // Verification kontrolü başlat
            this.startVerificationCheck(result.verificationToken);
            
            this.showNotification('Doğrulama e-postası gönderildi!', 'success');
            
            return result;
          } else {
            const error = await response.json();
            throw new Error(error.error || 'Mail gönderilemedi');
          }
        } catch (error) {
          console.error('❌ Verification email error:', error);
          this.showNotification(`❌ Hata: ${error.message}`, 'error');
          throw error;
        }
      }

      // Modern Bekleme UI'ı Göster
      showVerificationWaiting(email) {
        const loginForm = document.getElementById('loginForm');
        if (!loginForm) return;

        const userName = email.split('@')[0];
        
        loginForm.innerHTML = `
          <div class="verification-container fade-in">
            <div class="verification-content">
              <span class="email-icon">📧</span>
              <h2 style="margin: 0 0 10px 0; font-size: 28px; font-weight: 700;">
                E-posta Onayı Bekleniyor
              </h2>
              <p style="opacity: 0.9; font-size: 16px; margin-bottom: 25px;">
                Merhaba <strong>${userName}</strong>! <br>
                <strong>${email}</strong> adresine doğrulama linki gönderdik.
              </p>

              <div class="info-card">
                <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 15px;">
                  <span style="font-size: 24px; margin-right: 10px;">⏱️</span>
                  <span style="font-size: 16px; font-weight: 600;">Kalan Süre</span>
                </div>
                <div class="progress-container">
                  <div class="progress-bar"></div>
                </div>
                <p style="margin: 10px 0 0 0; font-size: 14px; opacity: 0.8;">
                  Doğrulama linki 2 dakika içinde geçersiz olacak
                </p>
              </div>

              <div style="margin: 30px 0;">
                <p style="font-size: 16px; margin-bottom: 20px;">
                   E-postanızı kontrol edin:
                </p>
                <div class="email-providers">
                  <a href="https://mail.google.com" target="_blank" class="email-provider">
                    <div style="font-size: 20px; margin-bottom: 5px;"></div>
                    <div style="font-size: 12px;">Gmail</div>
                  </a>
                  <a href="https://outlook.live.com" target="_blank" class="email-provider">
                    <div style="font-size: 20px; margin-bottom: 5px;"></div>
                    <div style="font-size: 12px;">Outlook</div>
                  </a>
                  <a href="https://mail.yahoo.com" target="_blank" class="email-provider">
                    <div style="font-size: 20px; margin-bottom: 5px;"></div>
                    <div style="font-size: 12px;">Yahoo</div>
                  </a>
                </div>
              </div>

              <div style="margin: 25px 0;">
                <button onclick="emailVerification.openEmailApp()" class="modern-btn btn-primary pulse">
                  📧 E-posta Uygulamasını Aç
                </button>
                <button onclick="emailVerification.resendVerification()" class="modern-btn btn-success">
                  🔄 Tekrar Gönder
                </button>
              </div>

              <button onclick="emailVerification.cancelVerification()" class="modern-btn btn-danger" style="margin-top: 20px;">
                ❌ İptal Et
              </button>

              <div class="modern-spinner"></div>
            </div>
          </div>
        `;
      }

      showDeniedAnimation(userData) {
        const loginForm = document.getElementById('loginForm');
        if (!loginForm) return;

        loginForm.innerHTML = `
          <div class="verification-container fade-in" style="background: linear-gradient(135deg, #fc466b 0%, #3f5efb 100%);">
            <div class="verification-content">
              <div style="font-size: 80px; animation: bounce 1s ease-in-out;"></div>
              <h2 style="margin: 20px 0; font-size: 32px; font-weight: 700;">
                Giriş Reddedildi
              </h2>
              <p style="font-size: 18px; margin-bottom: 20px; opacity: 0.95;">
                <strong>${userData.name || userData.email}</strong><br>
                Giriş talebiniz reddedildi
              </p>
              
              <div class="info-card" style="border-left-color: #fff;">
                <p style="margin: 0; font-size: 16px;">
                   Ana sayfaya yönlendiriliyorsunuz...
                </p>
              </div>

              <div class="modern-spinner" style="border-top-color: #fff; margin-top: 30px;"></div>
            </div>
          </div>
        `;
      }

      // Verification Status Kontrolü
      async startVerificationCheck(verificationToken) {
        
        let checkCount = 0;
        const maxChecks = 60; // 2 dakika (2 saniyede bir)
        
        this.verificationCheckInterval = setInterval(async () => {
          checkCount++;
          
          try {
            // Önce localStorage kontrol
            const localVerification = localStorage.getItem('loginVerification');
            if (localVerification) {
              const data = JSON.parse(localVerification);
              
              if (data.verified && (Date.now() - data.timestamp) < 10000) {
                localStorage.removeItem('loginVerification');
                this.stopVerificationCheck();
                
                if (data.action === 'approved') {
                  this.handleSuccessfulLogin(data.userData);
                } else {
                  this.handleDeniedLogin(result.userData);
                }
                return;
              }
            }
            
            // Backend kontrolü
            const response = await fetch('/api/mail/check-verification', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                token: verificationToken.replace('...', '').substring(0, 16)
              })
            });
            
            if (response.ok) {
              const result = await response.json();
              
              if (result.verified) {
                this.stopVerificationCheck();
                
                if (result.action === 'approved') {
                  this.handleSuccessfulLogin(result.userData);
                } else {
                  this.showNotification(result.message || 'Giriş reddedildi', 'error');
                }
              } else if (result.expired || checkCount >= maxChecks) {
                this.stopVerificationCheck();
                this.showNotification('Doğrulama süresi doldu. Lütfen tekrar deneyin.', 'error');
                setTimeout(() => {
                  try {
                    window.location.href = '/';
                  } catch (error) {
                    console.error(' Redirect error:', error);
                    window.location.replace('/');
                  }
                }, 5500);
              }
            }
          } catch (error) {
            console.error('❌ Verification check error:', error);
            if (checkCount >= maxChecks) {
              this.stopVerificationCheck();
              this.showNotification('❌ Bağlantı hatası. Lütfen tekrar deneyin.', 'error');
            }
          }
        }, 2000);
      }

      // Verification Check Durdur
      stopVerificationCheck() {
        if (this.verificationCheckInterval) {
          clearInterval(this.verificationCheckInterval);
          this.verificationCheckInterval = null;
        }
        if (this.timeoutHandler) {
          clearTimeout(this.timeoutHandler);
          this.timeoutHandler = null;
        }
      }

      // Başarılı Login
      async handleSuccessfulLogin(userData) {
        try {
          // Backend'e login durumunu bildir ve user role/data al
          const loginResponse = await fetch('/api/auth/login-success', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: userData.email,
              verificationTime: userData.verificationTime,
              loginMethod: 'email_verification'
            })
          });

          if (loginResponse.ok) {
            const backendUserData = await loginResponse.json();
            
            // Backend'den gelen tam user data'yı kaydet
            const completeUserData = {
              ...userData,
              ...backendUserData.user,
              userRole: backendUserData.userRole || 'user',
              sessionToken: backendUserData.sessionToken,
              loginTime: new Date().toISOString()
            };
            
            
            // Local storage'a kaydet
            localStorage.setItem('user', JSON.stringify(completeUserData));
            localStorage.setItem('userRole', completeUserData.userRole);
            localStorage.setItem('isLoggedIn', 'true');
            localStorage.setItem('sessionToken', completeUserData.sessionToken);
            
            // Success animasyonu göster
            this.showSuccessAnimation(completeUserData);
            
          } else {
            
            // Fallback - basic user data kaydet
            localStorage.setItem('user', JSON.stringify(userData));
            localStorage.setItem('isLoggedIn', 'true');
            localStorage.setItem('userRole', 'user'); // Default role
            
            this.showSuccessAnimation(userData);
          }
          
        } catch (error) {
          
          // Fallback - basic user data kaydet
          localStorage.setItem('user', JSON.stringify(userData));
          localStorage.setItem('isLoggedIn', 'true');
          localStorage.setItem('userRole', 'user');
          
          this.showSuccessAnimation(userData);
        }
        
        // 3 saniye sonra yönlendir
        setTimeout(() => {
          if (window.location.pathname.includes('login')) {
            closeInfoModal();
            closeNewDeviceApprovalModal();
            openDeviceNameModal();
            //window.location.href = '/user';
          } else {
            location.reload();
          }
        }, 3000);
      }

      handleDeniedLogin(userData) {
        
        this.showDeniedAnimation(userData);
        
        // 3 saniye sonra ana sayfaya yönlendir
        setTimeout(() => {
          window.location.href = '/';
        }, 3000);
      }

      // Başarı Animasyonu
      showSuccessAnimation(userData) {
        const loginForm = document.getElementById('loginForm');
        if (!loginForm) return;

        loginForm.innerHTML = `
          <div class="verification-container fade-in" style="background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);">
            <div class="verification-content">
              <div style="font-size: 80px; animation: bounce 1s ease-in-out;"></div>
              <h2 style="margin: 20px 0; font-size: 32px; font-weight: 700;">
                Hoş Geldiniz!
              </h2>
              <p style="font-size: 18px; margin-bottom: 20px; opacity: 0.95;">
                <strong>${userData.name || userData.email}</strong><br>
                Giriş başarıyla onaylandı!
              </p>
              
              <div class="info-card" style="border-left-color: #fff;">
                <p style="margin: 0; font-size: 16px;">
                   Yönlendiriliyorsunuz...
                </p>
              </div>

              <div class="modern-spinner" style="border-top-color: #fff; margin-top: 30px;"></div>
            </div>
          </div>
        `;

      }


      //E-posta Uygulaması Aç
      openEmailApp() {
        if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
          window.location.href = 'mailto:';
        } else {
          this.showNotification('💻 Yukarıdaki e-posta sağlayıcı butonlarını kullanın', 'success');
        }
      }

      // Verification Tekrar Gönder
      async resendVerification() {
        const lastEmail = localStorage.getItem('lastVerificationEmail');
        if (!lastEmail) {
          this.showNotification('❌ E-posta adresi bulunamadı', 'error');
          return;
        }

        if (this.retryCount >= this.maxRetries) {
          this.showNotification('❌ Maksimum deneme sayısına ulaştınız', 'error');
          return;
        }

        try {
          this.stopVerificationCheck();
          this.retryCount++;
          
          // Device info'yu tekrar al
          const deviceInfo = this.getDeviceInfo();
          await this.sendLoginVerificationEmail(lastEmail, deviceInfo);
          
        } catch (error) {
          console.error('❌ Resend error:', error);
          this.showNotification('❌ E-posta gönderilemedi: ' + error.message, 'error');
        }
      }

      // Verification İptal
      cancelVerification() {
        this.stopVerificationCheck();
        localStorage.removeItem('lastVerificationEmail');
        window.location.href = '/';      }

      // Device Info Al
      getDeviceInfo() {
        return {
          deviceName: navigator.platform || 'Unknown Device',
          userAgent: navigator.userAgent,
          language: navigator.language,
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          timestamp: new Date().toISOString()
        };
      }

      showNotification(message, type = 'success') {
        // Eski bildirimleri temizle
        document.querySelectorAll('.notification').forEach(n => n.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
          <div style="display: flex; align-items: center; justify-content: space-between;">
            <div style="display: flex; align-items: center;">
              <div style="font-size: 24px; margin-right: 15px;">
                ${type === 'success' ? '✅' : '❌'}
              </div>
              <div>
                <div style="font-weight: 600; margin-bottom: 5px;">
                  ${type === 'success' ? 'Başarılı!' : 'Hata!'}
                </div>
                <div style="opacity: 0.9; font-size: 14px;">
                  ${message}
                </div>
              </div>
            </div>
            <button onclick="this.parentElement.parentElement.remove()" 
                    style="background: none; border: none; color: white; font-size: 20px; cursor: pointer; padding: 5px;">
              ×
            </button>
          </div>
        `;
        
        document.body.appendChild(notification);
        
        // 5 saniye sonra otomatik kaldır
        setTimeout(() => {
          if (notification.parentNode) {
            notification.style.animation = 'slideOutRight 0.5s ease-out';
            setTimeout(() => notification.remove(), 500);
          }
        }, 5000);
      }
    }

  // Global instance oluştur
  const emailVerification = new EmailVerificationSystem();

  //Global fonksiyonları export et
  window.sendLoginVerificationEmail = (email, device, user) => 
    emailVerification.sendLoginVerificationEmail(email, device, user);

  window.emailVerification = emailVerification;

//----------------------------
  </script>
</body>
</html>